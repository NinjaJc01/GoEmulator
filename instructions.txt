CPU Instructions
All data is stored as signed 32bit ints, processed as 2's complement when required. Programs are assembled to sequences of binary strings.
Code		Number	Description																					Syntax
HLT			0		Exit																						HLT
DAT			0		Used to mark out data																		DAT <data>
ADD			1		Add the data in the memory location to the accumulator										ADD <loc>
SUB			2		Subtract the data in the memlocation from the acc											SUB <loc>
ST(a/o/r)	3		Stor acc in memloc	Can be STA, STO or STR													STO <loc>
BRZ			4		Jump if acc is zero to mem																	JMZ <loc>
BRP			5		Jump if acc is positive to mem																JPL <loc>
BRA			6		Jump no matter what to mem																	JMP <loc>
LDA			7		Load the acc with the value 																LDA <loc>
OUT			8		Output the acc value, as a char or a number	(fp or int)										OUT <0 for number, 1 for character, 2 for floating point>
INP			9		Input, 0 for number, 1 for char. One char at a time, anything beyond 1 is ignored			INP <0 or 1>
ASR 		10		Arithmatic Shift Right by 1 bit (On the acc)												ASR 0
ASL 		11		Arithmatic Shift Left by 1 bit (On the acc) (x2)											ASL 0
MUL			12		Multiply by loc																				MUL <loc>
CMP			13		CoMPare acc to location, 1 if acc greater, 0 if equal, -1 if acc lower, set acc =result		CMP <loc>
SET			14		Set acc to operand																			SET <val>
FPU Instructions (32bit, Signed 24bit mantissa, Signed 8 bit exponent but not IEEE754. Internally, these are processed as float64s)
FAD         256     Floating point ADd acc and loc                                                              FAD <loc>
FSU         257     Floating point SUb loc from acc                                                             FSU <loc>
FMU         258     Floating point MUltiply acc and loc                                                         FMU <loc>
FDV         259     Floating point DiVide acc by loc                                                            FDV <loc>
FSQ         260     Floating point square acc                                                                   FSQ <doesn't matter>
FCV         261     Convert ACC from int to int repr of float                                                   FCV <doesn't matter>
FCI         262     Convert ACC from float to int (floor)                                                       FCI <doesn't ma

